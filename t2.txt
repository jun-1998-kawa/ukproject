      const base: any = { boutId: selectedBout.id, tSec, scorerPlayerId, opponentPlayerId, position: selectedBout.ourPosition ?? null, scorerStance: form.scorer === 'our' ? (selectedBout.ourStance ?? null) : (selectedBout.opponentStance ?? null), opponentStance: form.scorer === 'our' ? (selectedBout.opponentStance ?? null) : (selectedBout.ourStance ?? null), judgement: form.judgement, isDecisive: form.isDecisive, recordedAt: new Date().toISOString(), version: 1 }
      const input = isFoul ? { ...base, techniqueKey: 'HANSOKU' } : { ...base, target: form.target, methods: form.methods, techniqueKey: techniqueKey(form.target, form.methods) }
      const res: Response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': token }, body: JSON.stringify({ query: createPointMutation, variables: { input } }) })
      const json: any = await res.json(); if (json.errors) throw new Error(JSON.stringify(json.errors))
      await fetchMatches(); setForm(f => ({ ...f, tSec: 60, methods: [], isDecisive: false, sequenceLen: 1, sequenceTargets: [], isMutual: false }))
    } catch (e:any) { setError(String(e?.message ?? e)) } finally { setLoading(false) }
  }

  async function addFoul(toSide: 'left'|'right'){
    if(!selectedBout) return
    const penalizedPlayerId = toSide === 'left' ? selectedBout.ourPlayerId : selectedBout.opponentPlayerId
    const opponentPlayerId = toSide === 'left' ? selectedBout.opponentPlayerId : selectedBout.ourPlayerId
    const next = (fouls[penalizedPlayerId] ?? 0) + 1
    setFouls(prev => ({ ...prev, [penalizedPlayerId]: next }))
    if (next >= 2) {
      setLoading(true); setError(null)
      try {
        const token = await getToken(); if (!token) throw new Error('No ID token')
        const input: any = { boutId: selectedBout.id, tSec: Number(form.tSec) || 0, scorerPlayerId: opponentPlayerId, opponentPlayerId: penalizedPlayerId, position: selectedBout.ourPosition ?? null, scorerStance: null, opponentStance: null, judgement: 'HANSOKU', isDecisive: false, techniqueKey: 'HANSOKU', recordedAt: new Date().toISOString(), version: 1 }
        const res: Response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': token }, body: JSON.stringify({ query: createPointMutation, variables: { input } }) })
        const json: any = await res.json(); if (json.errors) throw new Error(JSON.stringify(json.errors))
        await fetchMatches(); setFouls(prev => ({ ...prev, [penalizedPlayerId]: 0 }))
      } catch (e: any) { setError(String(e?.message ?? e)) } finally { setLoading(false) }
    }
  }

  return (
    <Authenticator>
      {({ signOut, user }) => (
        <div className="app-shell">
          <header className="app-header">
            <div style={{ display:'flex', alignItems:'center', gap:12 }}>
              <Heading level={4} style={{ margin:0 }}>{t('app.title')}</Heading>
            </div>
            <div style={{ marginLeft:'auto', display:'flex', alignItems:'center', gap:12 }}>
              <Badge variation="info">{user?.signInDetails?.loginId}</Badge>
              <Button onClick={signOut}>{t('action.signOut')}</Button>
            </div>
          </header>
          <aside className="app-sidebar">
            <nav style={{ display:'grid', gap:6 }}>
              <a className={`nav-item${tab==='dashboard'?' active':''}`} onClick={()=> setTab('dashboard')}>{t('tab.dashboard')}</a>
              <a className={`nav-item${tab==='new'?' active':''}`} onClick={()=> setTab('new')}>{t('tab.new')}</a>
              <hr />
              <div className="muted" style={{ fontSize:'12px', padding:'4px 8px' }}>Admin</div>
              <a className={`nav-item${tab==='players'?' active':''}`} onClick={()=> setTab('players')}>{t('nav.playersRegister')}</a>
              <a className={`nav-item${tab==='universities'?' active':''}`} onClick={()=> setTab('universities')}>{t('nav.universities')}</a>
            </nav>
          </aside>
          <main className="app-main">
            {tab==='new' ? (
              <NewEntryMode
                matchId={selectedMatchId}
                setMatchId={setSelectedMatchId}
                matches={matches as any}
                bouts={(selectedMatch as any)?.bouts?.items ?? []}
                players={players}
                masters={{ targets: masters.targets as any, methods: masters.methods as any }}
                apiUrl={apiUrl}
                getToken={getToken}
                onSaved={fetchMatches}
              />
            ) : null}

          {tab==='players' && (<PlayersAdmin apiUrl={apiUrl} getToken={getToken} />)}
          {tab==='universities' && (<UniversitiesAdmin apiUrl={apiUrl} getToken={getToken} />)}
          {tab==='dashboard' ? (
            <>
              <div style={{ display:'flex', gap:8, marginBottom:12 }}>
                <Button variation={dashMode==='personal'?'primary':'link'} onClick={()=> setDashMode('personal')}>{i18n.language?.startsWith('ja') ? 'å¬êl' : 'Personal'}</Button>
                <Button variation={dashMode==='team'?'primary':'link'} onClick={()=> setDashMode('team')}>{i18n.language?.startsWith('ja') ? 'É`Å[ÉÄ' : 'Team'}</Button>
              </div>
              {dashMode==='personal' ? (
                <Dashboard
                  matches={matches as any}
                  players={players}
                  labelJa={labelJa}
                  masters={{ targets: masters.targets as any, methods: masters.methods as any }}
                  homeUniversityId={homeUniversityId}
                />
              ) : (
                <TeamDashboard
                  matches={matches as any}
                  universities={universities}
                  apiUrl={apiUrl}
                  getToken={getToken}
                  tournamentPlaylists={tournamentPlaylists}
                  players={players}
                  labelJa={labelJa}
                  homeUniversityId={homeUniversityId}
                />
              )}
            </>
          ) : null}
          </main>
        </div>
      )}
    </Authenticator>
  )
}

































